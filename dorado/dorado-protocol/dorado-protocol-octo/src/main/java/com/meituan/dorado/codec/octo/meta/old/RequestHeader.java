/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.dorado.codec.octo.meta.old;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class RequestHeader implements org.apache.thrift.TBase<RequestHeader, RequestHeader._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHeader");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)10001);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.STRING, (short)10002);
  private static final org.apache.thrift.protocol.TField CLIENT_APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("clientAppkey", org.apache.thrift.protocol.TType.STRING, (short)10003);
  private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIp", org.apache.thrift.protocol.TType.STRING, (short)10004);
  private static final org.apache.thrift.protocol.TField SPAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("spanName", org.apache.thrift.protocol.TType.STRING, (short)10005);
  private static final org.apache.thrift.protocol.TField SERVER_IP_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverIpPort", org.apache.thrift.protocol.TType.STRING, (short)10006);
  private static final org.apache.thrift.protocol.TField DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("debug", org.apache.thrift.protocol.TType.BOOL, (short)10007);
  private static final org.apache.thrift.protocol.TField SAMPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sample", org.apache.thrift.protocol.TType.BOOL, (short)10008);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)10009);
  private static final org.apache.thrift.protocol.TField LOCAL_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("localContext", org.apache.thrift.protocol.TType.MAP, (short)10010);
  private static final org.apache.thrift.protocol.TField GLOBAL_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("globalContext", org.apache.thrift.protocol.TType.MAP, (short)10011);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestHeaderTupleSchemeFactory());
  }

  public String traceId; // required
  public String spanId; // required
  public String clientAppkey; // required
  public String clientIp; // required
  public String spanName; // required
  public String serverIpPort; // required
  public boolean debug; // required
  public boolean sample; // required
  public String version; // required
  public Map<String,String> localContext; // optional
  public Map<String,String> globalContext; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)10001, "traceId"),
    SPAN_ID((short)10002, "spanId"),
    CLIENT_APPKEY((short)10003, "clientAppkey"),
    CLIENT_IP((short)10004, "clientIp"),
    SPAN_NAME((short)10005, "spanName"),
    SERVER_IP_PORT((short)10006, "serverIpPort"),
    DEBUG((short)10007, "debug"),
    SAMPLE((short)10008, "sample"),
    VERSION((short)10009, "version"),
    LOCAL_CONTEXT((short)10010, "localContext"),
    GLOBAL_CONTEXT((short)10011, "globalContext");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10001: // TRACE_ID
          return TRACE_ID;
        case 10002: // SPAN_ID
          return SPAN_ID;
        case 10003: // CLIENT_APPKEY
          return CLIENT_APPKEY;
        case 10004: // CLIENT_IP
          return CLIENT_IP;
        case 10005: // SPAN_NAME
          return SPAN_NAME;
        case 10006: // SERVER_IP_PORT
          return SERVER_IP_PORT;
        case 10007: // DEBUG
          return DEBUG;
        case 10008: // SAMPLE
          return SAMPLE;
        case 10009: // VERSION
          return VERSION;
        case 10010: // LOCAL_CONTEXT
          return LOCAL_CONTEXT;
        case 10011: // GLOBAL_CONTEXT
          return GLOBAL_CONTEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEBUG_ISSET_ID = 0;
  private static final int __SAMPLE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.LOCAL_CONTEXT, _Fields.GLOBAL_CONTEXT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_APPKEY, new org.apache.thrift.meta_data.FieldMetaData("clientAppkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("spanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_IP_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverIpPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBUG, new org.apache.thrift.meta_data.FieldMetaData("debug", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SAMPLE, new org.apache.thrift.meta_data.FieldMetaData("sample", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("localContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "Context")));
    tmpMap.put(_Fields.GLOBAL_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("globalContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "Context")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHeader.class, metaDataMap);
  }

  public RequestHeader() {
  }

  public RequestHeader(
    String traceId,
    String spanId,
    String clientAppkey,
    String clientIp,
    String spanName,
    String serverIpPort,
    boolean debug,
    boolean sample,
    String version)
  {
    this();
    this.traceId = traceId;
    this.spanId = spanId;
    this.clientAppkey = clientAppkey;
    this.clientIp = clientIp;
    this.spanName = spanName;
    this.serverIpPort = serverIpPort;
    this.debug = debug;
    setDebugIsSet(true);
    this.sample = sample;
    setSampleIsSet(true);
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestHeader(RequestHeader other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    if (other.isSetSpanId()) {
      this.spanId = other.spanId;
    }
    if (other.isSetClientAppkey()) {
      this.clientAppkey = other.clientAppkey;
    }
    if (other.isSetClientIp()) {
      this.clientIp = other.clientIp;
    }
    if (other.isSetSpanName()) {
      this.spanName = other.spanName;
    }
    if (other.isSetServerIpPort()) {
      this.serverIpPort = other.serverIpPort;
    }
    this.debug = other.debug;
    this.sample = other.sample;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetLocalContext()) {
      this.localContext = other.localContext;
    }
    if (other.isSetGlobalContext()) {
      this.globalContext = other.globalContext;
    }
  }

  @Override
  public RequestHeader deepCopy() {
    return new RequestHeader(this);
  }

  @Override
  public void clear() {
    this.traceId = null;
    this.spanId = null;
    this.clientAppkey = null;
    this.clientIp = null;
    this.spanName = null;
    this.serverIpPort = null;
    setDebugIsSet(false);
    this.debug = false;
    setSampleIsSet(false);
    this.sample = false;
    this.version = null;
    this.localContext = null;
    this.globalContext = null;
  }

  public String getTraceId() {
    return this.traceId;
  }

  public RequestHeader setTraceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public String getSpanId() {
    return this.spanId;
  }

  public RequestHeader setSpanId(String spanId) {
    this.spanId = spanId;
    return this;
  }

  public void unsetSpanId() {
    this.spanId = null;
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return this.spanId != null;
  }

  public void setSpanIdIsSet(boolean value) {
    if (!value) {
      this.spanId = null;
    }
  }

  public String getClientAppkey() {
    return this.clientAppkey;
  }

  public RequestHeader setClientAppkey(String clientAppkey) {
    this.clientAppkey = clientAppkey;
    return this;
  }

  public void unsetClientAppkey() {
    this.clientAppkey = null;
  }

  /** Returns true if field clientAppkey is set (has been assigned a value) and false otherwise */
  public boolean isSetClientAppkey() {
    return this.clientAppkey != null;
  }

  public void setClientAppkeyIsSet(boolean value) {
    if (!value) {
      this.clientAppkey = null;
    }
  }

  public String getClientIp() {
    return this.clientIp;
  }

  public RequestHeader setClientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  public void unsetClientIp() {
    this.clientIp = null;
  }

  /** Returns true if field clientIp is set (has been assigned a value) and false otherwise */
  public boolean isSetClientIp() {
    return this.clientIp != null;
  }

  public void setClientIpIsSet(boolean value) {
    if (!value) {
      this.clientIp = null;
    }
  }

  public String getSpanName() {
    return this.spanName;
  }

  public RequestHeader setSpanName(String spanName) {
    this.spanName = spanName;
    return this;
  }

  public void unsetSpanName() {
    this.spanName = null;
  }

  /** Returns true if field spanName is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanName() {
    return this.spanName != null;
  }

  public void setSpanNameIsSet(boolean value) {
    if (!value) {
      this.spanName = null;
    }
  }

  public String getServerIpPort() {
    return this.serverIpPort;
  }

  public RequestHeader setServerIpPort(String serverIpPort) {
    this.serverIpPort = serverIpPort;
    return this;
  }

  public void unsetServerIpPort() {
    this.serverIpPort = null;
  }

  /** Returns true if field serverIpPort is set (has been assigned a value) and false otherwise */
  public boolean isSetServerIpPort() {
    return this.serverIpPort != null;
  }

  public void setServerIpPortIsSet(boolean value) {
    if (!value) {
      this.serverIpPort = null;
    }
  }

  public boolean isDebug() {
    return this.debug;
  }

  public RequestHeader setDebug(boolean debug) {
    this.debug = debug;
    setDebugIsSet(true);
    return this;
  }

  public void unsetDebug() {
    __isset_bit_vector.clear(__DEBUG_ISSET_ID);
  }

  /** Returns true if field debug is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug() {
    return __isset_bit_vector.get(__DEBUG_ISSET_ID);
  }

  public void setDebugIsSet(boolean value) {
    __isset_bit_vector.set(__DEBUG_ISSET_ID, value);
  }

  public boolean isSample() {
    return this.sample;
  }

  public RequestHeader setSample(boolean sample) {
    this.sample = sample;
    setSampleIsSet(true);
    return this;
  }

  public void unsetSample() {
    __isset_bit_vector.clear(__SAMPLE_ISSET_ID);
  }

  /** Returns true if field sample is set (has been assigned a value) and false otherwise */
  public boolean isSetSample() {
    return __isset_bit_vector.get(__SAMPLE_ISSET_ID);
  }

  public void setSampleIsSet(boolean value) {
    __isset_bit_vector.set(__SAMPLE_ISSET_ID, value);
  }

  public String getVersion() {
    return this.version;
  }

  public RequestHeader setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getLocalContextSize() {
    return (this.localContext == null) ? 0 : this.localContext.size();
  }

  public void putToLocalContext(String key, String val) {
    if (this.localContext == null) {
      this.localContext = new HashMap<String,String>();
    }
    this.localContext.put(key, val);
  }

  public Map<String,String> getLocalContext() {
    return this.localContext;
  }

  public RequestHeader setLocalContext(Map<String,String> localContext) {
    this.localContext = localContext;
    return this;
  }

  public void unsetLocalContext() {
    this.localContext = null;
  }

  /** Returns true if field localContext is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalContext() {
    return this.localContext != null;
  }

  public void setLocalContextIsSet(boolean value) {
    if (!value) {
      this.localContext = null;
    }
  }

  public int getGlobalContextSize() {
    return (this.globalContext == null) ? 0 : this.globalContext.size();
  }

  public void putToGlobalContext(String key, String val) {
    if (this.globalContext == null) {
      this.globalContext = new HashMap<String,String>();
    }
    this.globalContext.put(key, val);
  }

  public Map<String,String> getGlobalContext() {
    return this.globalContext;
  }

  public RequestHeader setGlobalContext(Map<String,String> globalContext) {
    this.globalContext = globalContext;
    return this;
  }

  public void unsetGlobalContext() {
    this.globalContext = null;
  }

  /** Returns true if field globalContext is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalContext() {
    return this.globalContext != null;
  }

  public void setGlobalContextIsSet(boolean value) {
    if (!value) {
      this.globalContext = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((String)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((String)value);
      }
      break;

    case CLIENT_APPKEY:
      if (value == null) {
        unsetClientAppkey();
      } else {
        setClientAppkey((String)value);
      }
      break;

    case CLIENT_IP:
      if (value == null) {
        unsetClientIp();
      } else {
        setClientIp((String)value);
      }
      break;

    case SPAN_NAME:
      if (value == null) {
        unsetSpanName();
      } else {
        setSpanName((String)value);
      }
      break;

    case SERVER_IP_PORT:
      if (value == null) {
        unsetServerIpPort();
      } else {
        setServerIpPort((String)value);
      }
      break;

    case DEBUG:
      if (value == null) {
        unsetDebug();
      } else {
        setDebug((Boolean)value);
      }
      break;

    case SAMPLE:
      if (value == null) {
        unsetSample();
      } else {
        setSample((Boolean)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case LOCAL_CONTEXT:
      if (value == null) {
        unsetLocalContext();
      } else {
        setLocalContext((Map<String,String>)value);
      }
      break;

    case GLOBAL_CONTEXT:
      if (value == null) {
        unsetGlobalContext();
      } else {
        setGlobalContext((Map<String,String>)value);
      }
      break;

    }
  }

  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTraceId();

    case SPAN_ID:
      return getSpanId();

    case CLIENT_APPKEY:
      return getClientAppkey();

    case CLIENT_IP:
      return getClientIp();

    case SPAN_NAME:
      return getSpanName();

    case SERVER_IP_PORT:
      return getServerIpPort();

    case DEBUG:
      return Boolean.valueOf(isDebug());

    case SAMPLE:
      return Boolean.valueOf(isSample());

    case VERSION:
      return getVersion();

    case LOCAL_CONTEXT:
      return getLocalContext();

    case GLOBAL_CONTEXT:
      return getGlobalContext();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case CLIENT_APPKEY:
      return isSetClientAppkey();
    case CLIENT_IP:
      return isSetClientIp();
    case SPAN_NAME:
      return isSetSpanName();
    case SERVER_IP_PORT:
      return isSetServerIpPort();
    case DEBUG:
      return isSetDebug();
    case SAMPLE:
      return isSetSample();
    case VERSION:
      return isSetVersion();
    case LOCAL_CONTEXT:
      return isSetLocalContext();
    case GLOBAL_CONTEXT:
      return isSetGlobalContext();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestHeader)
      return this.equals((RequestHeader)that);
    return false;
  }

  public boolean equals(RequestHeader that) {
    if (that == null)
      return false;

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_spanId = true && this.isSetSpanId();
    boolean that_present_spanId = true && that.isSetSpanId();
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (!this.spanId.equals(that.spanId))
        return false;
    }

    boolean this_present_clientAppkey = true && this.isSetClientAppkey();
    boolean that_present_clientAppkey = true && that.isSetClientAppkey();
    if (this_present_clientAppkey || that_present_clientAppkey) {
      if (!(this_present_clientAppkey && that_present_clientAppkey))
        return false;
      if (!this.clientAppkey.equals(that.clientAppkey))
        return false;
    }

    boolean this_present_clientIp = true && this.isSetClientIp();
    boolean that_present_clientIp = true && that.isSetClientIp();
    if (this_present_clientIp || that_present_clientIp) {
      if (!(this_present_clientIp && that_present_clientIp))
        return false;
      if (!this.clientIp.equals(that.clientIp))
        return false;
    }

    boolean this_present_spanName = true && this.isSetSpanName();
    boolean that_present_spanName = true && that.isSetSpanName();
    if (this_present_spanName || that_present_spanName) {
      if (!(this_present_spanName && that_present_spanName))
        return false;
      if (!this.spanName.equals(that.spanName))
        return false;
    }

    boolean this_present_serverIpPort = true && this.isSetServerIpPort();
    boolean that_present_serverIpPort = true && that.isSetServerIpPort();
    if (this_present_serverIpPort || that_present_serverIpPort) {
      if (!(this_present_serverIpPort && that_present_serverIpPort))
        return false;
      if (!this.serverIpPort.equals(that.serverIpPort))
        return false;
    }

    boolean this_present_debug = true;
    boolean that_present_debug = true;
    if (this_present_debug || that_present_debug) {
      if (!(this_present_debug && that_present_debug))
        return false;
      if (this.debug != that.debug)
        return false;
    }

    boolean this_present_sample = true;
    boolean that_present_sample = true;
    if (this_present_sample || that_present_sample) {
      if (!(this_present_sample && that_present_sample))
        return false;
      if (this.sample != that.sample)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_localContext = true && this.isSetLocalContext();
    boolean that_present_localContext = true && that.isSetLocalContext();
    if (this_present_localContext || that_present_localContext) {
      if (!(this_present_localContext && that_present_localContext))
        return false;
      if (!this.localContext.equals(that.localContext))
        return false;
    }

    boolean this_present_globalContext = true && this.isSetGlobalContext();
    boolean that_present_globalContext = true && that.isSetGlobalContext();
    if (this_present_globalContext || that_present_globalContext) {
      if (!(this_present_globalContext && that_present_globalContext))
        return false;
      if (!this.globalContext.equals(that.globalContext))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RequestHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RequestHeader typedOther = (RequestHeader)other;

    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(typedOther.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, typedOther.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientAppkey()).compareTo(typedOther.isSetClientAppkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientAppkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientAppkey, typedOther.clientAppkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientIp()).compareTo(typedOther.isSetClientIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIp, typedOther.clientIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanName()).compareTo(typedOther.isSetSpanName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanName, typedOther.spanName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerIpPort()).compareTo(typedOther.isSetServerIpPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerIpPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverIpPort, typedOther.serverIpPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug()).compareTo(typedOther.isSetDebug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug, typedOther.debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSample()).compareTo(typedOther.isSetSample());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSample()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sample, typedOther.sample);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalContext()).compareTo(typedOther.isSetLocalContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localContext, typedOther.localContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlobalContext()).compareTo(typedOther.isSetGlobalContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalContext, typedOther.globalContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequestHeader(");
    boolean first = true;

    sb.append("traceId:");
    if (this.traceId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    if (this.spanId == null) {
      sb.append("null");
    } else {
      sb.append(this.spanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientAppkey:");
    if (this.clientAppkey == null) {
      sb.append("null");
    } else {
      sb.append(this.clientAppkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientIp:");
    if (this.clientIp == null) {
      sb.append("null");
    } else {
      sb.append(this.clientIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanName:");
    if (this.spanName == null) {
      sb.append("null");
    } else {
      sb.append(this.spanName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverIpPort:");
    if (this.serverIpPort == null) {
      sb.append("null");
    } else {
      sb.append(this.serverIpPort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("debug:");
    sb.append(this.debug);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sample:");
    sb.append(this.sample);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetLocalContext()) {
      if (!first) sb.append(", ");
      sb.append("localContext:");
      if (this.localContext == null) {
        sb.append("null");
      } else {
        sb.append(this.localContext);
      }
      first = false;
    }
    if (isSetGlobalContext()) {
      if (!first) sb.append(", ");
      sb.append("globalContext:");
      if (this.globalContext == null) {
        sb.append("null");
      } else {
        sb.append(this.globalContext);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestHeaderStandardSchemeFactory implements SchemeFactory {
    @Override
    public RequestHeaderStandardScheme getScheme() {
      return new RequestHeaderStandardScheme();
    }
  }

  private static class RequestHeaderStandardScheme extends StandardScheme<RequestHeader> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10001: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10002: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanId = iprot.readString();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10003: // CLIENT_APPKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientAppkey = iprot.readString();
              struct.setClientAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10004: // CLIENT_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientIp = iprot.readString();
              struct.setClientIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10005: // SPAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanName = iprot.readString();
              struct.setSpanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10006: // SERVER_IP_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverIpPort = iprot.readString();
              struct.setServerIpPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10007: // DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.debug = iprot.readBool();
              struct.setDebugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10008: // SAMPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sample = iprot.readBool();
              struct.setSampleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10009: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10010: // LOCAL_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.localContext = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.localContext.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setLocalContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10011: // GLOBAL_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.globalContext = new HashMap<String,String>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  String _key6; // required
                  String _val7; // required
                  _key6 = iprot.readString();
                  _val7 = iprot.readString();
                  struct.globalContext.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setGlobalContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.traceId != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceId);
        oprot.writeFieldEnd();
      }
      if (struct.spanId != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.spanId);
        oprot.writeFieldEnd();
      }
      if (struct.clientAppkey != null) {
        oprot.writeFieldBegin(CLIENT_APPKEY_FIELD_DESC);
        oprot.writeString(struct.clientAppkey);
        oprot.writeFieldEnd();
      }
      if (struct.clientIp != null) {
        oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
        oprot.writeString(struct.clientIp);
        oprot.writeFieldEnd();
      }
      if (struct.spanName != null) {
        oprot.writeFieldBegin(SPAN_NAME_FIELD_DESC);
        oprot.writeString(struct.spanName);
        oprot.writeFieldEnd();
      }
      if (struct.serverIpPort != null) {
        oprot.writeFieldBegin(SERVER_IP_PORT_FIELD_DESC);
        oprot.writeString(struct.serverIpPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEBUG_FIELD_DESC);
      oprot.writeBool(struct.debug);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAMPLE_FIELD_DESC);
      oprot.writeBool(struct.sample);
      oprot.writeFieldEnd();
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.localContext != null) {
        if (struct.isSetLocalContext()) {
          oprot.writeFieldBegin(LOCAL_CONTEXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.localContext.size()));
            for (Map.Entry<String, String> _iter8 : struct.localContext.entrySet())
            {
              oprot.writeString(_iter8.getKey());
              oprot.writeString(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.globalContext != null) {
        if (struct.isSetGlobalContext()) {
          oprot.writeFieldBegin(GLOBAL_CONTEXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.globalContext.size()));
            for (Map.Entry<String, String> _iter9 : struct.globalContext.entrySet())
            {
              oprot.writeString(_iter9.getKey());
              oprot.writeString(_iter9.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestHeaderTupleSchemeFactory implements SchemeFactory {
    @Override
    public RequestHeaderTupleScheme getScheme() {
      return new RequestHeaderTupleScheme();
    }
  }

  private static class RequestHeaderTupleScheme extends TupleScheme<RequestHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTraceId()) {
        optionals.set(0);
      }
      if (struct.isSetSpanId()) {
        optionals.set(1);
      }
      if (struct.isSetClientAppkey()) {
        optionals.set(2);
      }
      if (struct.isSetClientIp()) {
        optionals.set(3);
      }
      if (struct.isSetSpanName()) {
        optionals.set(4);
      }
      if (struct.isSetServerIpPort()) {
        optionals.set(5);
      }
      if (struct.isSetDebug()) {
        optionals.set(6);
      }
      if (struct.isSetSample()) {
        optionals.set(7);
      }
      if (struct.isSetVersion()) {
        optionals.set(8);
      }
      if (struct.isSetLocalContext()) {
        optionals.set(9);
      }
      if (struct.isSetGlobalContext()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetSpanId()) {
        oprot.writeString(struct.spanId);
      }
      if (struct.isSetClientAppkey()) {
        oprot.writeString(struct.clientAppkey);
      }
      if (struct.isSetClientIp()) {
        oprot.writeString(struct.clientIp);
      }
      if (struct.isSetSpanName()) {
        oprot.writeString(struct.spanName);
      }
      if (struct.isSetServerIpPort()) {
        oprot.writeString(struct.serverIpPort);
      }
      if (struct.isSetDebug()) {
        oprot.writeBool(struct.debug);
      }
      if (struct.isSetSample()) {
        oprot.writeBool(struct.sample);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetLocalContext()) {
        {
          oprot.writeI32(struct.localContext.size());
          for (Map.Entry<String, String> _iter10 : struct.localContext.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
      if (struct.isSetGlobalContext()) {
        {
          oprot.writeI32(struct.globalContext.size());
          for (Map.Entry<String, String> _iter11 : struct.globalContext.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spanId = iprot.readString();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientAppkey = iprot.readString();
        struct.setClientAppkeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clientIp = iprot.readString();
        struct.setClientIpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.spanName = iprot.readString();
        struct.setSpanNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.serverIpPort = iprot.readString();
        struct.setServerIpPortIsSet(true);
      }
      if (incoming.get(6)) {
        struct.debug = iprot.readBool();
        struct.setDebugIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sample = iprot.readBool();
        struct.setSampleIsSet(true);
      }
      if (incoming.get(8)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.localContext = new HashMap<String,String>(2*_map12.size);
          for (int _i13 = 0; _i13 < _map12.size; ++_i13)
          {
            String _key14; // required
            String _val15; // required
            _key14 = iprot.readString();
            _val15 = iprot.readString();
            struct.localContext.put(_key14, _val15);
          }
        }
        struct.setLocalContextIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.globalContext = new HashMap<String,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18; // required
            String _val19; // required
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.globalContext.put(_key18, _val19);
          }
        }
        struct.setGlobalContextIsSet(true);
      }
    }
  }

}

